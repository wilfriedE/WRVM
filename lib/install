Rubies = {'system' => {name: 'System',:type => 'mri', :git_branch => '', :git_tag => '', :git_path => 'https://github.com/wilfriedE/Ruby.git'},
		  '1.8.7' => {name: 'Ruby 1.8.7',:type => 'mri', :git_branch => '1.8.7-p371', :git_tag => '', :git_path => 'https://github.com/wilfriedE/Ruby.git'},
		  '1.9.3' => {name: 'Ruby 1.9.3',:type => 'mri', :git_branch => '1.9.3-p484', :git_tag => '', :git_path => 'https://github.com/wilfriedE/Ruby.git'},
		  '2.0.0' => {name: 'Ruby 2.0.0',:type => 'mri', :git_branch => '2.0.0-p451', :git_tag => '', :git_path => 'https://github.com/wilfriedE/Ruby.git'},
		  '2.0.0-x64' => {name: 'Ruby 2.0.0-x64',:type => 'mri', :git_branch => '2.0.0-p451', :git_tag => '', :git_path => 'https://github.com/wilfriedE/Ruby.git'},
		  'J-1.6.8' => {name: 'JRuby 1.6.8',:type => 'jruby', :git_branch => '', :git_tag => '1.6.8', :git_path => 'https://github.com/jruby/jruby.git'},
		  'J-1.7.13' => {name: 'JRuby 1.7.13',:type => 'jruby', :git_branch => '', :git_tag => '1.7.13', :git_path => 'https://github.com/jruby/jruby.git'},
		  'Rbx-2.2.6' => {name: 'Rubinius 2.2.6', :type => 'rubinius', :git_branch => '', :git_tag => 'v2.2.6 ', :git_path => 'https://github.com/rubinius/rubinius.git'}
		}

rubi = ARGV[0]
location = ARGV[1]
def directory_exists?(folder)
  location = ARGV[1]
  puts "#{location}/#{folder}"
  File.directory?("#{location}/#{folder}")
end

if directory_exists?(rubi)
	puts "This ruby is already installed"
	puts
	puts "run 'WRVM use #{rubi}' to use set it as default"
else
	if Rubies[rubi][:type] == 'mri'
	
		puts "Installing #{Rubies[rubi][:name]} to #{location}/#{rubi}"
		if rubi == 'system' 
			IO.popen("git clone #{Rubies[rubi][:git_path]} #{location}/#{rubi}", 'r+') {|f|
				f.puts('....') # you can also use #write
				f.close_write
			  	f.read # get the data from the pipe
			} # don't forget 'r+'
		else	
			IO.popen("git clone -b #{Rubies[rubi][:git_branch]} #{Rubies[rubi][:git_path]} #{location}/#{rubi}", 'r+') {|f|
				f.puts('....') # you can also use #write
				f.close_write
			  	f.read # get the data from the pipe
			} # don't forget 'r+'
		end
	else
	puts "Installing #{Rubies[rubi][:name]}" 
	IO.popen("git clone #{Rubies[rubi][:git_path]} #{location}/#{rubi}", 'r+') {|f| # don't forget 'r+'
		  f.puts('....') # you can also use #write
		  f.close_write
		  f.read # get the data from the pipe
	}
	IO.popen("wrvm_sc #{location}/#{rubi} #{Rubies[rubi][:git_tag]}", 'r+') {|f| # don't forget 'r+'
		  f.puts('....') # you can also use #write
		  f.close_write
		  f.read # get the data from the pipe
	}
	 # This portion is buggy as of now. Mainly because Rubinius requires more setup for windows. 
	 # A hack would be to require installation for MingW package here.
	 # After install user can run WRVM Rubinius setup to configure Rubinius properly.
		if Rubies[rubi][:type] == 'rubinius'
			IO.popen("wrvm_tc #{location}/#{rubi}", 'r+') {|f| # don't forget 'r+'
				f.puts('....') # you can also use #write
				f.close_write
				f.read # get the data from the pipe
			}
		end
	end
end
